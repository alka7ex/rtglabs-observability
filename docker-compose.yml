version: '3.8'
services:
  alloy:
    build:
      context: ./alloy
      dockerfile: Dockerfile
    container_name: alloy
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "9090:9090" # Alloy's own metrics/debug UI
    environment:
      - GRAFANA_CLOUD_LOKI_USERNAME=${GRAFANA_CLOUD_LOKI_USERNAME}
      - GRAFANA_CLOUD_LOKI_PASSWORD=${GRAFANA_CLOUD_LOKI_PASSWORD}
      - GRAFANA_CLOUD_PROM_USERNAME=${GRAFANA_CLOUD_PROM_USERNAME}
      - GRAFANA_CLOUD_PROM_PASSWORD=${GRAFANA_CLOUD_PROM_PASSWORD}
      - POSTGRES_DSN=${POSTGRES_DSN} # New: Pass PostgreSQL DSN to Alloy
    networks:
      - coolify
    # Add this to reach host services (for node_exporter, and if Postgres is on host)
    extra_hosts:
      - "host.docker.internal:host-gateway"
    # Mount Docker socket for container log collection
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # New: Mount PostgreSQL log directory from the host into the Alloy container
      # Adjust /path/to/your/host/postgres/logs if different
      - /var/log/postgresql:/var/log/postgresql:ro
    labels:
      - coolify.managed=true
      - coolify.applicationId=17
      - coolify.type=application

  # postgres_exporter service is now removed as Alloy's built-in exporter is used

  # Example Go applications - ensure these are defined if they're not external
  # For simplicity, assuming 'goapp1', 'goapp2', 'goapp3' refer to other services
  # in your Docker Compose or external services reachable by name.
  # If they are separate containers, they would look something like this:
  # goapp1:
  #   image: your_go_app_image_1
  #   container_name: goapp1
  #   ports:
  #     - "8080:8080" # Or different port if needed
  #   networks:
  #     - coolify
  #   labels:
  #     - coolify.managed=true
  #     - coolify.applicationId=20
  #     - coolify.type=go_application

networks:
  coolify:
    external: true
