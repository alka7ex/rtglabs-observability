// Remote write endpoint for metrics
prometheus.remote_write "metrics_service" {
    endpoint {
        url = "https://prometheus-prod-52-prod-ap-southeast-2.grafana.net/api/prom/push"
        basic_auth {
            username = env("GRAFANA_CLOUD_PROM_USERNAME")
            password = env("GRAFANA_CLOUD_PROM_PASSWORD")
        }
    }
}

// Loki endpoint for logs
loki.write "grafana_cloud_loki" {
    endpoint {
        url = "https://logs-prod-032.grafana.net/loki/api/v1/push"
        basic_auth {
            username = env("GRAFANA_CLOUD_LOKI_USERNAME")
            password = env("GRAFANA_CLOUD_LOKI_PASSWORD")
        }
    }
}

// NODE EXPORTER INTEGRATION
discovery.relabel "metrics_node_exporter_targets" {
  targets = [{
    __address__ = "host.docker.internal:9100", // Assumes node_exporter is running on the host
  }]

  rule {
    target_label = "instance"
    replacement  = "rtglabs-server" // Specific instance name for your server
  }
}

prometheus.scrape "metrics_node_exporter" {
  targets     = discovery.relabel.metrics_node_exporter_targets.output
  forward_to  = [prometheus.relabel.metrics_node_exporter.receiver]
  job_name    = "node_exporter" // Specific job for node exporter metrics
  scrape_interval = "15s"
  metrics_path = "/metrics"
}

prometheus.relabel "metrics_node_exporter" {
  forward_to = [prometheus.remote_write.metrics_service.receiver]

  // Drop scrape collector metrics (they're not useful)
  rule {
    source_labels = ["__name__"]
    regex         = "node_scrape_collector_.+"
    action        = "drop"
  }

  // Add environment label
  rule {
    target_label = "environment"
    replacement  = "production"
  }
}

// POSTGRES EXPORTER INTEGRATION (using Alloy's built-in exporter)
prometheus.exporter.postgres "postgres_metrics_exporter" {
    // data_source_names expects a list of DSNs.
    // Use an environment variable to provide the connection string for security and flexibility.
    data_source_names = [env("POSTGRES_DSN")]
}

discovery.relabel "metrics_postgres_targets" {
    // The targets are generated by prometheus.exporter.postgres
    targets = prometheus.exporter.postgres.postgres_metrics_exporter.targets

    rule {
        target_label = "instance"
        // If Alloy is on the same host as Postgres, constants.hostname is good.
        // If Postgres is on a different host, you might need a different replacement
        // that identifies the Postgres host (e.g., "my-postgres-db-host").
        replacement  = constants.hostname
    }
    rule {
        target_label = "job"
        replacement  = "postgres_metrics" // Specific job for Postgres metrics
    }
}

prometheus.scrape "postgres_metrics" {
    targets     = discovery.relabel.metrics_postgres_targets.output
    forward_to  = [prometheus.relabel.metrics_postgres.receiver]
    job_name    = "postgres_metrics" // Set job_name here directly
    scrape_interval = "30s"
    metrics_path = "/metrics" // Default path for prometheus.exporter.postgres
}

prometheus.relabel "metrics_postgres" {
    forward_to = [prometheus.remote_write.metrics_service.receiver]

    // Add database label (if you want a default, or it can come from the exporter itself)
    rule {
        target_label = "database"
        replacement  = "main"
    }

    // Add environment label
    rule {
        target_label = "environment"
        replacement  = "production"
    }
}

// POSTGRES LOGS INTEGRATION (from local file)
local.file_match "logs_postgres_files" {
    path_targets = [{
        __address__ = "localhost", // Can be any value, mostly for identification in target status
        __path__    = "/var/log/postgresql/postgres.log", // Adjust if your log path is different
        // These labels will be added to the logs
        instance    = constants.hostname, // Identifies the host where logs are collected
        job         = "postgres_logs",    // Specific job for Postgres logs
        environment = "production",       // Add environment label directly
    }]
    // Add other log files if needed, e.g., error logs:
    // path_targets = [{
    //    __address__ = "localhost",
    //    __path__    = "/var/log/postgresql/error.log",
    //    instance    = constants.hostname,
    //    job         = "postgres_error_logs",
    //    environment = "production",
    // }]
}

loki.source.file "postgres_logs" {
    targets    = local.file_match.logs_postgres_files.targets
    forward_to = [loki.relabel.postgres_logs.receiver]
}

loki.relabel "postgres_logs" {
    forward_to = [loki.write.grafana_cloud_loki.receiver]

    // No additional relabeling needed here if labels are set in local.file_match
    // rule {
    //   target_label = "environment"
    //   replacement = "production"
    // }
}


// GO APPLICATIONS INTEGRATION
discovery.relabel "metrics_go_applications_targets" {
  targets = [
    {__address__ = "goapp1:8080"},
    {__address__ = "goapp2:8080"},
    {__address__ = "goapp3:8080"},
  ]

  // The instance label will default to __address__ (e.g., goapp1:8080), which is good.
}

prometheus.scrape "metrics_go_applications" {
  targets     = discovery.relabel.metrics_go_applications_targets.output
  forward_to  = [prometheus.relabel.metrics_go_applications.receiver]
  job_name    = "go_application" // Specific job for Go app metrics
  scrape_interval = "15s"
  metrics_path = "/metrics"
}

prometheus.relabel "metrics_go_applications" {
  forward_to = [prometheus.remote_write.metrics_service.receiver]

  // Add application type label
  rule {
    target_label = "app_type"
    replacement  = "go_service"
  }

  // Add environment label
  rule {
    target_label = "environment"
    replacement  = "production"
  }
}

// DOCKER CONTAINER LOGS
discovery.docker "containers" {
  host = "unix:///var/run/docker.sock"
}

discovery.relabel "loki_docker_containers_targets" {
  targets = discovery.docker.containers.targets

  // Only collect logs from containers with specific labels
  rule {
    source_labels = ["__meta_docker_container_label_coolify_managed"]
    regex = "true"
    action = "keep"
  }

  rule {
    source_labels = ["__meta_docker_container_name"]
    target_label = "container"
  }

  rule {
    source_labels = ["__meta_docker_container_label_coolify_applicationId"]
    target_label = "application_id"
  }

  // The job for Loki logs from Docker containers
  rule {
    target_label = "job"
    replacement = "docker_container_logs" // Specific job name for logs
  }
}

loki.source.docker "containers" {
  host            = "unix:///var/run/docker.sock"
  targets         = discovery.relabel.loki_docker_containers_targets.output
  forward_to      = [loki.relabel.loki_docker_containers.receiver]
  relabel_rules   = discovery.relabel.loki_docker_containers_targets.rules
}

loki.relabel "loki_docker_containers" {
  forward_to = [loki.write.grafana_cloud_loki.receiver]

  rule {
    target_label = "environment"
    replacement = "production"
  }
}
